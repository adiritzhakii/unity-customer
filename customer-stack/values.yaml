# Default values for customer-stack.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
customer-client:
  name: customer-client
  image:
    repository: customer-client
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: latest

  replicaCount: 1

  service:
    type: ClusterIP
    port: 80

  env:
  - name: SERVER_URL
    value:

  resources:
    limits:
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 128Mi

customer-manager:
  name: customer-manager
  image:
    repository: customer-manager
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: latest

  replicaCount: 1

  service:
    type: ClusterIP
    port: 3000

  env:
  - KAFKA_URL=customer-stack-kafka:9092
  - MONGO_URL=customer-stack-mongodb:27017

  resources:
    limits:
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 128Mi


customer-facing-web-server:
  name: customer-facing-web-server
  image:
  repository: customer-facing-web-server
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: latest

  replicaCount: 1

  service:
    type: ClusterIP
    port: 3001

  env:
  - KAFKA_URL=customer-stack-kafka:9092
  - CUSTOMER_SERVER_URL=

  resources:
    limits:
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 128Mi



imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
# fsGroup: 2000

securityContext: {}
# capabilities:
#   drop:
#   - ALL
# readOnlyRootFilesystem: true
# runAsNonRoot: true
# runAsUser: 1000


ingress:
  enabled: false
  className: ""
  annotations: {}
  # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  hosts:
  - host: chart-example.local
    paths:
    - path: /
      pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
# We usually recommend not to specify default resources and to leave this as a conscious
# choice for the user. This also increases chances charts run on environments with little
# resources, such as Minikube. If you do want to specify resources, uncomment the following
# lines, adjust them as necessary, and remove the curly braces after 'resources:'.
# limits:
#   cpu: 100m
#   memory: 128Mi
# requests:
#   cpu: 100m
#   memory: 128Mi

livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

mongodb:
  auth:
    enabled: false

prometheus:
  serverFiles:
    prometheus.yml:
      scrape_configs:
      - job_name: 'nestjs'
        static_configs:
        - targets:
          - customer-facing-web-server:3001
      - job_name: prometheus
        static_configs:
        - targets:
          - localhost:9090

prometheus-adapter:
  prometheus:
    url: http://customer-stack-prometheus-server
  rules:
    custom:
    - seriesQuery: '{__name__=~"^http_requests_total$"}'
      resources:
        overrides:
          instance:
            resource: pod
      name:
        matches: "^(.*)_total"
        as: "${1}_per_second"
      metricsQuery: 'sum(rate(<<.Series>>{<<.LabelMatchers>>}[5m])) by (<<.GroupBy>>)'
